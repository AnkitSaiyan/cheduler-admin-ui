import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseCheckboxComponent } from '../base-checkbox.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class CheckboxComponent extends BaseCheckboxComponent {
    constructor() {
        super(...arguments);
        this.indeterminate = false;
    }
}
CheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CheckboxComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
CheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: CheckboxComponent, selector: "dfm-checkbox", inputs: { indeterminate: "indeterminate" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => CheckboxComponent),
        },
    ], usesInheritance: true, ngImport: i0, template: "<div class=\"dfm-checkbox form-check dfm-checkbox-{{ size }}\" [class.disabled]=\"disabled\">\n  <input class=\"checkbox form-check-input\" [(ngModel)]=\"value\" [indeterminate]=\"indeterminate\" [disabled]=\"disabled\" type=\"checkbox\" [id]=\"id\" />\n  <label class=\"d-flex flex-column label-{{ size }}\" [for]=\"id\">\n    <span class=\"text-{{ size }}-medium dfm-text-main-700\">{{ label }}</span>\n    <span class=\"text-{{ size }} dfm-text-main-500\">{{ hint }}</span>\n  </label>\n</div>\n", styles: [".dfm-checkbox.dfm-checkbox-sm{font-size:16px}.dfm-checkbox.dfm-checkbox-md{font-size:20px}.dfm-checkbox .checkbox{margin-top:2px}.dfm-checkbox .checkbox:hover{background-color:var(--dfm-checkbox-hover-bg);border:1px solid var(--dfm-checkbox-border-hover)}.dfm-checkbox .checkbox:hover:checked{background-color:var(--dfm-checkbox-hover-bg)}.dfm-checkbox .checkbox:checked{background-color:var(--dfm-checkbox-checked-bg);background-image:var(--dfm-checkbox-bg-img-checked)}.dfm-checkbox .checkbox:checked:disabled{background-image:var(--dfm-checkbox-bg-img-checked-disabled)}.dfm-checkbox .checkbox:disabled{background-color:var(--dfm-checkbox-disabled-bg);border:1px solid var(--dfm-checkbox-disabled-border)}.dfm-checkbox .checkbox:hover{cursor:pointer}.dfm-checkbox .checkbox:focus{box-shadow:0 0 0 4px var(--dfm-checkbox-focus-shadow);border:1px solid var(--dfm-checkbox-focus-border)}.dfm-checkbox .checkbox:indeterminate{background-color:var(--dfm-checkbox-checked-bg);background-image:var(--dfm-checkbox-bg-img-indeterminate)}.dfm-checkbox .checkbox:indeterminate:disabled{background-color:var(--dfm-checkbox-disabled-bg);background-image:var(--dfm-checkbox-bg-img-indeterminate-disabled)}.dfm-checkbox:not(.disabled) label{cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dfm-checkbox', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => CheckboxComponent),
                        },
                    ], template: "<div class=\"dfm-checkbox form-check dfm-checkbox-{{ size }}\" [class.disabled]=\"disabled\">\n  <input class=\"checkbox form-check-input\" [(ngModel)]=\"value\" [indeterminate]=\"indeterminate\" [disabled]=\"disabled\" type=\"checkbox\" [id]=\"id\" />\n  <label class=\"d-flex flex-column label-{{ size }}\" [for]=\"id\">\n    <span class=\"text-{{ size }}-medium dfm-text-main-700\">{{ label }}</span>\n    <span class=\"text-{{ size }} dfm-text-main-500\">{{ hint }}</span>\n  </label>\n</div>\n", styles: [".dfm-checkbox.dfm-checkbox-sm{font-size:16px}.dfm-checkbox.dfm-checkbox-md{font-size:20px}.dfm-checkbox .checkbox{margin-top:2px}.dfm-checkbox .checkbox:hover{background-color:var(--dfm-checkbox-hover-bg);border:1px solid var(--dfm-checkbox-border-hover)}.dfm-checkbox .checkbox:hover:checked{background-color:var(--dfm-checkbox-hover-bg)}.dfm-checkbox .checkbox:checked{background-color:var(--dfm-checkbox-checked-bg);background-image:var(--dfm-checkbox-bg-img-checked)}.dfm-checkbox .checkbox:checked:disabled{background-image:var(--dfm-checkbox-bg-img-checked-disabled)}.dfm-checkbox .checkbox:disabled{background-color:var(--dfm-checkbox-disabled-bg);border:1px solid var(--dfm-checkbox-disabled-border)}.dfm-checkbox .checkbox:hover{cursor:pointer}.dfm-checkbox .checkbox:focus{box-shadow:0 0 0 4px var(--dfm-checkbox-focus-shadow);border:1px solid var(--dfm-checkbox-focus-border)}.dfm-checkbox .checkbox:indeterminate{background-color:var(--dfm-checkbox-checked-bg);background-image:var(--dfm-checkbox-bg-img-indeterminate)}.dfm-checkbox .checkbox:indeterminate:disabled{background-color:var(--dfm-checkbox-disabled-bg);background-image:var(--dfm-checkbox-bg-img-indeterminate-disabled)}.dfm-checkbox:not(.disabled) label{cursor:pointer}\n"] }]
        }], propDecorators: { indeterminate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZGlmbGV4bW8tYW5ndWxhci1kZXNpZ24vc3JjL2xpYi9kZXNpZ24tc3lzdGVtL21vZHVsZXMvYmFzZS1jaGVja2JveC9jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2RpZmxleG1vLWFuZ3VsYXItZGVzaWduL3NyYy9saWIvZGVzaWduLXN5c3RlbS9tb2R1bGVzL2Jhc2UtY2hlY2tib3gvY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQWNuRSxNQUFNLE9BQU8saUJBQWtCLFNBQVEscUJBQXFCO0lBWjVEOztRQWFXLGtCQUFhLEdBQVksS0FBSyxDQUFDO0tBQ3pDOzsrR0FGWSxpQkFBaUI7bUdBQWpCLGlCQUFpQixtRkFSakI7UUFDVDtZQUNFLE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsS0FBSyxFQUFFLElBQUk7WUFDWCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1NBQ2pEO0tBQ0YsaURDZEgsb2ZBT0E7NEZEU2EsaUJBQWlCO2tCQVo3QixTQUFTOytCQUNFLGNBQWMsYUFHYjt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixLQUFLLEVBQUUsSUFBSTs0QkFDWCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQzt5QkFDakQ7cUJBQ0Y7OEJBR1EsYUFBYTtzQkFBckIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQmFzZUNoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZS1jaGVja2JveC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkZm0tY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jaGVja2JveC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ2hlY2tib3hDb21wb25lbnQpLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNoZWNrYm94Q29tcG9uZW50IHtcbiAgQElucHV0KCkgaW5kZXRlcm1pbmF0ZTogYm9vbGVhbiA9IGZhbHNlO1xufVxuIiwiPGRpdiBjbGFzcz1cImRmbS1jaGVja2JveCBmb3JtLWNoZWNrIGRmbS1jaGVja2JveC17eyBzaXplIH19XCIgW2NsYXNzLmRpc2FibGVkXT1cImRpc2FibGVkXCI+XG4gIDxpbnB1dCBjbGFzcz1cImNoZWNrYm94IGZvcm0tY2hlY2staW5wdXRcIiBbKG5nTW9kZWwpXT1cInZhbHVlXCIgW2luZGV0ZXJtaW5hdGVdPVwiaW5kZXRlcm1pbmF0ZVwiIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiIHR5cGU9XCJjaGVja2JveFwiIFtpZF09XCJpZFwiIC8+XG4gIDxsYWJlbCBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBsYWJlbC17eyBzaXplIH19XCIgW2Zvcl09XCJpZFwiPlxuICAgIDxzcGFuIGNsYXNzPVwidGV4dC17eyBzaXplIH19LW1lZGl1bSBkZm0tdGV4dC1tYWluLTcwMFwiPnt7IGxhYmVsIH19PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwidGV4dC17eyBzaXplIH19IGRmbS10ZXh0LW1haW4tNTAwXCI+e3sgaGludCB9fTwvc3Bhbj5cbiAgPC9sYWJlbD5cbjwvZGl2PlxuIl19