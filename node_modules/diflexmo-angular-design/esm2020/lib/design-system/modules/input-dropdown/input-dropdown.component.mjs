import { Component, ElementRef, EventEmitter, HostListener, Input, Optional, Output, ViewChild, ViewChildren, } from '@angular/core';
import { Dropdown } from 'bootstrap';
import { ItemsCompactHelper } from '../../helpers/items-compact-helper';
import { BaseControlValueAccessor } from '../base-control-value-accessor';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "../icon/components/icon/icon.component";
import * as i4 from "../input/input.component";
import * as i5 from "../tag/tag.component";
import * as i6 from "../error/error.component";
import * as i7 from "../../directives/dom-change.directive";
export class InputDropdownComponent extends BaseControlValueAccessor {
    constructor(changeDetectionRef, control, eRef) {
        super();
        this.changeDetectionRef = changeDetectionRef;
        this.control = control;
        this.eRef = eRef;
        this.items = [];
        this.label = '';
        this.placeholder = '';
        this.hint = '';
        this.showDescription = true;
        this.multiple = false;
        this.size = 'md';
        this.icon = '';
        this.minQueryLength = 0;
        this.typeToSearch = false;
        this.typeToSearchText = '';
        this.loading = false;
        this.asyncSearch = false;
        this.searchInput = new EventEmitter();
        this.menuClosed = new EventEmitter();
        this.search = '';
        this.selectedItemTags = [];
        this.filteredItems = [];
        this.defaultMultipleDropdownPaddingRight = 8;
        this.multipleDropdownWithIconPaddingRight = 51;
        this.isDropdownClosed = true;
        this.selectedItems = [];
        this.wasInside = false;
        this.value = null;
        if (this.control) {
            this.control.valueAccessor = this;
        }
    }
    clickInside() {
        this.wasInside = true;
    }
    clickout() {
        if (!this.wasInside) {
            this.dropdownInstance?.hide();
        }
        this.wasInside = false;
    }
    ngOnInit() {
        if (this.minQueryLength && !this.typeToSearchText) {
            this.typeToSearchText = `Please enter ${this.minQueryLength} or more characters`;
        }
        this.filteredItems = [...this.items];
    }
    ngAfterViewInit() {
        this.dropdownInstance = Dropdown.getOrCreateInstance(this.dropdownRef.nativeElement, {
            offset: [0, 3],
        });
    }
    ngOnChanges(changes) {
        if (changes['items']?.previousValue !== changes['items']?.currentValue) {
            this.filteredItems = [...changes['items'].currentValue];
        }
    }
    writeValue(value) {
        this.resetInputDropdown();
        if (!this.multiple) {
            const item = this.items.find((i) => i.value === value);
            if (item) {
                this.updateInputDropdown(item, true);
            }
        }
        else if (value && value.length) {
            const items = this.items.filter((i) => value.includes(i.value));
            items.forEach((i) => this.updateInputDropdown(i, false));
        }
    }
    updateSearch(query) {
        this.search = query;
        if (!this.multiple && this.value) {
            this.value = null;
        }
        if (query && query.length >= this.minQueryLength) {
            this.searchInput.emit(query);
        }
        else {
            this.filteredItems = this.asyncSearch ? [] : [...this.items];
        }
    }
    searchItems(query) {
        const lowerCaseQuery = query.toLowerCase();
        this.filteredItems = this.items.filter((i) => i.name.toLowerCase().includes(lowerCaseQuery) ||
            i.value.toLowerCase().includes(lowerCaseQuery) ||
            i.description?.toLowerCase().includes(lowerCaseQuery));
    }
    selectItem(item) {
        const isSelected = this.multiple ? this.value && this.value.includes(item.value) : this.value === item.value;
        this.updateInputDropdown(item, isSelected);
    }
    removeItem(item) {
        this.updateMultiInputDropdown(item, true);
    }
    updateSelectedItems() {
        const itemsUnion = ItemsCompactHelper.getItemsUnion();
        this.selectedItemTags = [...this.selectedItems, itemsUnion];
        this.changeDetectionRef.detectChanges();
        const { items, itemsUnionIndex, containerWidth } = ItemsCompactHelper.compactItems(this.selectedItemTags, this.searchInputRef.nativeElement.offsetWidth - 210, 8, this.selectedItemsRef);
        this.selectedItemTags = [...items];
        this.selectedItemTagsUnionIndex = itemsUnionIndex;
        const paddingRight = this.typeToSearch ? this.defaultMultipleDropdownPaddingRight : this.multipleDropdownWithIconPaddingRight;
        this.searchInputRef.nativeElement.querySelector('.dfm-input').style.paddingRight = `${containerWidth + paddingRight}px`;
    }
    openDropdown() {
        this.dropdownInstance?.show();
    }
    checkIfDropdownIsClosed(mutationRecord) {
        if (mutationRecord.type === 'attributes' && mutationRecord.attributeName === 'class') {
            this.isDropdownClosed = !this.isDropdownClosed;
            if (this.isDropdownClosed) {
                this.menuClosed.emit();
            }
        }
    }
    updateInputDropdown(item, isSelected) {
        if (this.multiple) {
            this.updateMultiInputDropdown(item, isSelected);
        }
        else {
            this.updateSingleInputDropdown(item);
        }
    }
    updateMultiInputDropdown(item, isSelected) {
        if (isSelected) {
            this.value = this.value.filter((i) => i !== item.value);
            this.selectedItems = this.selectedItems.filter((i) => i.value !== item.value);
        }
        else {
            this.value = this.value && this.value.length ? [...this.value, item.value] : [item.value];
            this.selectedItems.push(item);
        }
        this.updateSelectedItems();
        this.filteredItems = this.asyncSearch ? [] : [...this.items];
        this.search = '';
    }
    updateSingleInputDropdown(item) {
        this.setSingleInputDropdown(item);
    }
    setSingleInputDropdown(item) {
        this.value = item.value;
        this.search = item.name;
        if (this.asyncSearch) {
            this.filteredItems = [item];
        }
        this.dropdownInstance?.hide();
    }
    resetInputDropdown() {
        this.value = null;
        this.search = '';
        this.selectedItems = [];
        this.filteredItems = this.asyncSearch ? [] : [...this.items];
        this.updateSelectedItems();
    }
    focusout(value) {
        setTimeout(() => {
            if (!this.search) {
                this.onTouch(value);
            }
        }, 250);
    }
}
InputDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: InputDropdownComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NgControl, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
InputDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: InputDropdownComponent, selector: "dfm-input-dropdown", inputs: { items: "items", label: "label", placeholder: "placeholder", hint: "hint", showDescription: "showDescription", multiple: "multiple", size: "size", icon: "icon", minQueryLength: "minQueryLength", typeToSearch: "typeToSearch", typeToSearchText: "typeToSearchText", loading: "loading", asyncSearch: "asyncSearch" }, outputs: { searchInput: "searchInput", menuClosed: "menuClosed" }, host: { listeners: { "click": "clickInside()", "document:click": "clickout($event)" } }, viewQueries: [{ propertyName: "selectedItemsContainerRef", first: true, predicate: ["selectedItemsContainerRef"], descendants: true }, { propertyName: "searchInputRef", first: true, predicate: ["searchInputRef"], descendants: true, read: ElementRef }, { propertyName: "dropdownRef", first: true, predicate: ["dropdown"], descendants: true }, { propertyName: "selectedItemsRef", predicate: ["selectedItemRef"], descendants: true, read: ElementRef }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"dropdown input-dropdown input-dropdown-{{ size }}\">\n  <div #dropdown>\n    <div class=\"input-container\">\n      <dfm-input\n        [placeholder]=\"placeholder\"\n        [icon]=\"icon\"\n        [size]=\"size\"\n        [ngModel]=\"search\"\n        (ngModelChange)=\"updateSearch($event)\"\n        (focusout)=\"focusout($event)\"\n        [isInvalid]=\"!!(control && control.touched && !control.valid)\"\n        [readonly]=\"!typeToSearch\"\n        [label]=\"label\"\n        (click)=\"openDropdown()\"\n        #searchInputRef\n      ></dfm-input>\n      <dfm-icon name=\"chevron-down\" *ngIf=\"!typeToSearch\" class=\"dropdown-icon\"></dfm-icon>\n    </div>\n  </div>\n  <div *ngIf=\"selectedItemTags.length\" class=\"selected-items\" [class.selected-items-with-dropdown-icon]=\"!typeToSearch\" #selectedItemsContainerRef>\n    <dfm-tag\n      *ngFor=\"let selectedItem of selectedItemTags; let i = index\"\n      color=\"brown\"\n      [action]=\"selectedItemTagsUnionIndex === i ? null : 'close'\"\n      size=\"lg\"\n      (closeAction)=\"removeItem(selectedItem)\"\n      #selectedItemRef\n      >{{ selectedItem.name }}</dfm-tag\n    >\n  </div>\n  <span *ngIf=\"hint\" class=\"dfm-input-hint\">{{ hint }}</span>\n  <dfm-error [control]=\"control\"></dfm-error>\n  <div class=\"dropdown-menu dropdown-menu-end w-100 p-0\" (dfmDomChange)=\"checkIfDropdownIsClosed($event)\">\n    <ng-container *ngIf=\"loading; then loadingTemplate; else searchTemplate\"></ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"input-dropdown-item\">Loading...</div>\n    </ng-template>\n\n    <ng-template #searchTemplate>\n      <div *ngIf=\"search.length < minQueryLength\" class=\"input-dropdown-item type-to-search\">{{ typeToSearchText }}</div>\n      <ng-container *ngIf=\"search.length >= minQueryLength\">\n        <ng-container *ngIf=\"filteredItems && filteredItems.length; then itemsTemplate; else noItemsTemplate\"> </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #itemsTemplate>\n      <div *ngFor=\"let item of filteredItems\" (click)=\"selectItem(item)\" clickable class=\"input-dropdown-item option\">\n        <div class=\"option-content\">\n          {{ item.name }}\n          <span *ngIf=\"showDescription\" class=\"option-description\">{{ item.description }}</span>\n        </div>\n        <dfm-icon\n          *ngIf=\"value && ((!multiple && value === item.value) || (multiple && value.includes(item.value)))\"\n          name=\"check\"\n          class=\"option-selected\"\n        ></dfm-icon>\n      </div>\n    </ng-template>\n\n    <ng-template #noItemsTemplate>\n      <div class=\"input-dropdown-item\">No items found</div>\n    </ng-template>\n  </div>\n</div>\n", styles: [".input-dropdown{position:relative}.input-dropdown .input-dropdown-item{padding:10px 14px}.input-dropdown .option{display:flex;justify-content:space-between;cursor:pointer}.input-dropdown .option:hover{background-color:var(--dfm-input-dropdown-option-bg-hover)}.input-dropdown .option:hover:first-child{border-top-left-radius:8px;border-top-right-radius:8px}.input-dropdown .option:hover:last-child{border-bottom-left-radius:8px;border-bottom-right-radius:8px}.input-dropdown .option .option-content{display:flex;align-items:center;gap:8px}.input-dropdown .option .option-description{color:var(--dfm-input-dropdown-option-description-color);font-size:14px;font-weight:400;line-height:20px}.input-dropdown .option .option-selected{width:20px;height:20px;color:var(--dfm-input-dropdown-option-selected-color)}.input-dropdown .selected-items{position:absolute;top:7px;right:8px;display:flex;justify-content:flex-end;flex-wrap:wrap;gap:8px;max-width:calc(100% - 200px)}.input-dropdown .selected-items-with-dropdown-icon{right:43px}.input-dropdown .input-container{position:relative}.input-dropdown .input-container .dropdown-icon{position:absolute;display:block;right:15px;bottom:12px;width:20px;height:20px;color:var(--dfm-input-dropdown-chevron-icon-color);cursor:pointer}.input-dropdown.input-dropdown-sm .input-container .dropdown-icon{bottom:8px;right:14px}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.IconComponent, selector: "dfm-icon", inputs: ["name"] }, { kind: "component", type: i4.InputComponent, selector: "dfm-input", inputs: ["type", "size", "label", "placeholder", "disabled", "hint", "icon", "isInvalid", "readonly"] }, { kind: "component", type: i5.TagComponent, selector: "dfm-tag", inputs: ["color", "size", "action", "count", "icon"], outputs: ["closeAction"] }, { kind: "component", type: i6.ErrorComponent, selector: "dfm-error", inputs: ["control"] }, { kind: "directive", type: i7.DomChangeDirective, selector: "[dfmDomChange]", outputs: ["dfmDomChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: InputDropdownComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dfm-input-dropdown', template: "<div class=\"dropdown input-dropdown input-dropdown-{{ size }}\">\n  <div #dropdown>\n    <div class=\"input-container\">\n      <dfm-input\n        [placeholder]=\"placeholder\"\n        [icon]=\"icon\"\n        [size]=\"size\"\n        [ngModel]=\"search\"\n        (ngModelChange)=\"updateSearch($event)\"\n        (focusout)=\"focusout($event)\"\n        [isInvalid]=\"!!(control && control.touched && !control.valid)\"\n        [readonly]=\"!typeToSearch\"\n        [label]=\"label\"\n        (click)=\"openDropdown()\"\n        #searchInputRef\n      ></dfm-input>\n      <dfm-icon name=\"chevron-down\" *ngIf=\"!typeToSearch\" class=\"dropdown-icon\"></dfm-icon>\n    </div>\n  </div>\n  <div *ngIf=\"selectedItemTags.length\" class=\"selected-items\" [class.selected-items-with-dropdown-icon]=\"!typeToSearch\" #selectedItemsContainerRef>\n    <dfm-tag\n      *ngFor=\"let selectedItem of selectedItemTags; let i = index\"\n      color=\"brown\"\n      [action]=\"selectedItemTagsUnionIndex === i ? null : 'close'\"\n      size=\"lg\"\n      (closeAction)=\"removeItem(selectedItem)\"\n      #selectedItemRef\n      >{{ selectedItem.name }}</dfm-tag\n    >\n  </div>\n  <span *ngIf=\"hint\" class=\"dfm-input-hint\">{{ hint }}</span>\n  <dfm-error [control]=\"control\"></dfm-error>\n  <div class=\"dropdown-menu dropdown-menu-end w-100 p-0\" (dfmDomChange)=\"checkIfDropdownIsClosed($event)\">\n    <ng-container *ngIf=\"loading; then loadingTemplate; else searchTemplate\"></ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"input-dropdown-item\">Loading...</div>\n    </ng-template>\n\n    <ng-template #searchTemplate>\n      <div *ngIf=\"search.length < minQueryLength\" class=\"input-dropdown-item type-to-search\">{{ typeToSearchText }}</div>\n      <ng-container *ngIf=\"search.length >= minQueryLength\">\n        <ng-container *ngIf=\"filteredItems && filteredItems.length; then itemsTemplate; else noItemsTemplate\"> </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #itemsTemplate>\n      <div *ngFor=\"let item of filteredItems\" (click)=\"selectItem(item)\" clickable class=\"input-dropdown-item option\">\n        <div class=\"option-content\">\n          {{ item.name }}\n          <span *ngIf=\"showDescription\" class=\"option-description\">{{ item.description }}</span>\n        </div>\n        <dfm-icon\n          *ngIf=\"value && ((!multiple && value === item.value) || (multiple && value.includes(item.value)))\"\n          name=\"check\"\n          class=\"option-selected\"\n        ></dfm-icon>\n      </div>\n    </ng-template>\n\n    <ng-template #noItemsTemplate>\n      <div class=\"input-dropdown-item\">No items found</div>\n    </ng-template>\n  </div>\n</div>\n", styles: [".input-dropdown{position:relative}.input-dropdown .input-dropdown-item{padding:10px 14px}.input-dropdown .option{display:flex;justify-content:space-between;cursor:pointer}.input-dropdown .option:hover{background-color:var(--dfm-input-dropdown-option-bg-hover)}.input-dropdown .option:hover:first-child{border-top-left-radius:8px;border-top-right-radius:8px}.input-dropdown .option:hover:last-child{border-bottom-left-radius:8px;border-bottom-right-radius:8px}.input-dropdown .option .option-content{display:flex;align-items:center;gap:8px}.input-dropdown .option .option-description{color:var(--dfm-input-dropdown-option-description-color);font-size:14px;font-weight:400;line-height:20px}.input-dropdown .option .option-selected{width:20px;height:20px;color:var(--dfm-input-dropdown-option-selected-color)}.input-dropdown .selected-items{position:absolute;top:7px;right:8px;display:flex;justify-content:flex-end;flex-wrap:wrap;gap:8px;max-width:calc(100% - 200px)}.input-dropdown .selected-items-with-dropdown-icon{right:43px}.input-dropdown .input-container{position:relative}.input-dropdown .input-container .dropdown-icon{position:absolute;display:block;right:15px;bottom:12px;width:20px;height:20px;color:var(--dfm-input-dropdown-chevron-icon-color);cursor:pointer}.input-dropdown.input-dropdown-sm .input-container .dropdown-icon{bottom:8px;right:14px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }]; }, propDecorators: { items: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], hint: [{
                type: Input
            }], showDescription: [{
                type: Input
            }], multiple: [{
                type: Input
            }], size: [{
                type: Input
            }], icon: [{
                type: Input
            }], minQueryLength: [{
                type: Input
            }], typeToSearch: [{
                type: Input
            }], typeToSearchText: [{
                type: Input
            }], loading: [{
                type: Input
            }], asyncSearch: [{
                type: Input
            }], searchInput: [{
                type: Output
            }], menuClosed: [{
                type: Output
            }], selectedItemsContainerRef: [{
                type: ViewChild,
                args: ['selectedItemsContainerRef']
            }], selectedItemsRef: [{
                type: ViewChildren,
                args: ['selectedItemRef', { read: ElementRef }]
            }], searchInputRef: [{
                type: ViewChild,
                args: ['searchInputRef', { read: ElementRef }]
            }], dropdownRef: [{
                type: ViewChild,
                args: ['dropdown']
            }], clickInside: [{
                type: HostListener,
                args: ['click']
            }], clickout: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,