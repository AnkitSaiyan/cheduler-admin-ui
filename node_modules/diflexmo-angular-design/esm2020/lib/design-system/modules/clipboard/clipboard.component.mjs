import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { Tooltip } from 'bootstrap';
import * as i0 from "@angular/core";
import * as i1 from "../../services/clipboard.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "../icon/components/icon/icon.component";
export class ClipboardComponent {
    constructor(clipboardSerice, translateService) {
        this.clipboardSerice = clipboardSerice;
        this.translateService = translateService;
        this.clip = '';
        this.alwaysVisible = false;
        this.isCopied = false;
        this.copyToClipboardText = 'Copy to clipboard';
        this.copiedToClipboardText = 'Copied!';
        this.copyToClipboardTextKey = 'DESIGN_SYSTEM.MODULES.CLIPBOARD.COPY_TEXT';
        this.copiedToClipboardTextKey = 'DESIGN_SYSTEM.MODULES.CLIPBOARD.COPIED_TEXT';
        this.tooltips = [];
    }
    ngOnInit() {
        this.translateService.get(this.copyToClipboardTextKey).subscribe((t) => {
            if (t !== this.copyToClipboardTextKey) {
                this.copyToClipboardText = t;
            }
        });
        this.translateService.get(this.copiedToClipboardTextKey).subscribe((t) => {
            if (t !== this.copiedToClipboardTextKey) {
                this.copiedToClipboardText = t;
            }
        });
    }
    ngAfterViewInit() {
        const copyTooltip = new Tooltip(this.copyIcon.nativeElement, { title: this.copyToClipboardText });
        const copiedTooltip = new Tooltip(this.copiedIcon.nativeElement, { title: this.copiedToClipboardText });
        this.tooltips.push(copyTooltip, copiedTooltip);
    }
    ngOnDestroy() {
        this.tooltips.forEach((t) => t.dispose());
    }
    copyToClipboard() {
        this.clipboardSerice.emitToClipboard(this.clip);
        this.isCopied = true;
        setTimeout(() => {
            this.isCopied = false;
        }, 1000);
    }
}
ClipboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ClipboardComponent, deps: [{ token: i1.ClipboardService }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
ClipboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: ClipboardComponent, selector: "dfm-clipboard", inputs: { clip: "clip", alwaysVisible: "alwaysVisible" }, viewQueries: [{ propertyName: "copyIcon", first: true, predicate: ["copyIcon"], descendants: true, read: ElementRef }, { propertyName: "copiedIcon", first: true, predicate: ["copiedIcon"], descendants: true, read: ElementRef }], ngImport: i0, template: `
    <div class="d-flex dfm-gap-8 show-hidden">
      <div><ng-content></ng-content></div>
      <dfm-icon
        #copyIcon
        (click)="copyToClipboard(); $event.stopPropagation()"
        class="dfm-clipboard pointer icon-15 align-self-center"
        [ngClass]="{ hide: !alwaysVisible, 'd-none': isCopied }"
        name="copy-06"
      >
      </dfm-icon>
      <dfm-icon
        #copiedIcon
        (click)="$event.stopPropagation()"
        name="check"
        class="dfm-clipboard-copied pointer icon-15 align-self-center"
        [ngClass]="{ hide: !alwaysVisible, 'd-none': !isCopied }"
      ></dfm-icon>
    </div>
  `, isInline: true, styles: [".dfm-clipboard{color:var(--dfm-clipboard-color)}.dfm-clipboard:hover{color:var(--dfm-clipboard-color-hover)}.dfm-clipboard.hidden{display:none}.dfm-clipboard-copied{color:var(--dfm-clipboard-color-copied)}.dfm-clipboard-copied.hidden{display:none}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: i4.IconComponent, selector: "dfm-icon", inputs: ["name"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ClipboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dfm-clipboard', template: `
    <div class="d-flex dfm-gap-8 show-hidden">
      <div><ng-content></ng-content></div>
      <dfm-icon
        #copyIcon
        (click)="copyToClipboard(); $event.stopPropagation()"
        class="dfm-clipboard pointer icon-15 align-self-center"
        [ngClass]="{ hide: !alwaysVisible, 'd-none': isCopied }"
        name="copy-06"
      >
      </dfm-icon>
      <dfm-icon
        #copiedIcon
        (click)="$event.stopPropagation()"
        name="check"
        class="dfm-clipboard-copied pointer icon-15 align-self-center"
        [ngClass]="{ hide: !alwaysVisible, 'd-none': !isCopied }"
      ></dfm-icon>
    </div>
  `, styles: [".dfm-clipboard{color:var(--dfm-clipboard-color)}.dfm-clipboard:hover{color:var(--dfm-clipboard-color-hover)}.dfm-clipboard.hidden{display:none}.dfm-clipboard-copied{color:var(--dfm-clipboard-color-copied)}.dfm-clipboard-copied.hidden{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ClipboardService }, { type: i2.TranslateService }]; }, propDecorators: { clip: [{
                type: Input
            }], alwaysVisible: [{
                type: Input
            }], copyIcon: [{
                type: ViewChild,
                args: ['copyIcon', { read: ElementRef }]
            }], copiedIcon: [{
                type: ViewChild,
                args: ['copiedIcon', { read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2RpZmxleG1vLWFuZ3VsYXItZGVzaWduL3NyYy9saWIvZGVzaWduLXN5c3RlbS9tb2R1bGVzL2NsaXBib2FyZC9jbGlwYm9hcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7Ozs7QUEyQnBDLE1BQU0sT0FBTyxrQkFBa0I7SUFxQjdCLFlBQW9CLGVBQWlDLEVBQVUsZ0JBQWtDO1FBQTdFLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFwQnhGLFNBQUksR0FBVyxFQUFFLENBQUM7UUFFbEIsa0JBQWEsR0FBWSxLQUFLLENBQUM7UUFNakMsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUV6Qix3QkFBbUIsR0FBVyxtQkFBbUIsQ0FBQztRQUVsRCwwQkFBcUIsR0FBVyxTQUFTLENBQUM7UUFFMUMsMkJBQXNCLEdBQVcsMkNBQTJDLENBQUM7UUFFN0UsNkJBQXdCLEdBQVcsNkNBQTZDLENBQUM7UUFFakYsYUFBUSxHQUFjLEVBQUUsQ0FBQztJQUVtRSxDQUFDO0lBRXJHLFFBQVE7UUFDTixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3JFLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtnQkFDckMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQzthQUM5QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN2RSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsd0JBQXdCLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUM7YUFDaEM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ2IsTUFBTSxXQUFXLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUNsRyxNQUFNLGFBQWEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1FBRXhHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sZUFBZTtRQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFckIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7O2dIQXZEVSxrQkFBa0I7b0dBQWxCLGtCQUFrQixnTUFLRSxVQUFVLG1HQUVSLFVBQVUsNkJBN0JqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CVDs0RkFHVSxrQkFBa0I7a0JBeEI5QixTQUFTOytCQUNFLGVBQWUsWUFDZjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CVDtzSUFJUSxJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsYUFBYTtzQkFBckIsS0FBSztnQkFFdUMsUUFBUTtzQkFBcEQsU0FBUzt1QkFBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO2dCQUVJLFVBQVU7c0JBQXhELFNBQVM7dUJBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdib290c3RyYXAnO1xuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaXBib2FyZC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGZtLWNsaXBib2FyZCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImQtZmxleCBkZm0tZ2FwLTggc2hvdy1oaWRkZW5cIj5cbiAgICAgIDxkaXY+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PlxuICAgICAgPGRmbS1pY29uXG4gICAgICAgICNjb3B5SWNvblxuICAgICAgICAoY2xpY2spPVwiY29weVRvQ2xpcGJvYXJkKCk7ICRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiXG4gICAgICAgIGNsYXNzPVwiZGZtLWNsaXBib2FyZCBwb2ludGVyIGljb24tMTUgYWxpZ24tc2VsZi1jZW50ZXJcIlxuICAgICAgICBbbmdDbGFzc109XCJ7IGhpZGU6ICFhbHdheXNWaXNpYmxlLCAnZC1ub25lJzogaXNDb3BpZWQgfVwiXG4gICAgICAgIG5hbWU9XCJjb3B5LTA2XCJcbiAgICAgID5cbiAgICAgIDwvZGZtLWljb24+XG4gICAgICA8ZGZtLWljb25cbiAgICAgICAgI2NvcGllZEljb25cbiAgICAgICAgKGNsaWNrKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiXG4gICAgICAgIG5hbWU9XCJjaGVja1wiXG4gICAgICAgIGNsYXNzPVwiZGZtLWNsaXBib2FyZC1jb3BpZWQgcG9pbnRlciBpY29uLTE1IGFsaWduLXNlbGYtY2VudGVyXCJcbiAgICAgICAgW25nQ2xhc3NdPVwieyBoaWRlOiAhYWx3YXlzVmlzaWJsZSwgJ2Qtbm9uZSc6ICFpc0NvcGllZCB9XCJcbiAgICAgID48L2RmbS1pY29uPlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9jbGlwYm9hcmQuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBjbGlwOiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoKSBhbHdheXNWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQFZpZXdDaGlsZCgnY29weUljb24nLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgY29weUljb24hOiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ2NvcGllZEljb24nLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgY29waWVkSWNvbiE6IEVsZW1lbnRSZWY7XG5cbiAgcHVibGljIGlzQ29waWVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBjb3B5VG9DbGlwYm9hcmRUZXh0OiBzdHJpbmcgPSAnQ29weSB0byBjbGlwYm9hcmQnO1xuXG4gIHByaXZhdGUgY29waWVkVG9DbGlwYm9hcmRUZXh0OiBzdHJpbmcgPSAnQ29waWVkISc7XG5cbiAgcHJpdmF0ZSBjb3B5VG9DbGlwYm9hcmRUZXh0S2V5OiBzdHJpbmcgPSAnREVTSUdOX1NZU1RFTS5NT0RVTEVTLkNMSVBCT0FSRC5DT1BZX1RFWFQnO1xuXG4gIHByaXZhdGUgY29waWVkVG9DbGlwYm9hcmRUZXh0S2V5OiBzdHJpbmcgPSAnREVTSUdOX1NZU1RFTS5NT0RVTEVTLkNMSVBCT0FSRC5DT1BJRURfVEVYVCc7XG5cbiAgcHJpdmF0ZSB0b29sdGlwczogVG9vbHRpcFtdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGlwYm9hcmRTZXJpY2U6IENsaXBib2FyZFNlcnZpY2UsIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KHRoaXMuY29weVRvQ2xpcGJvYXJkVGV4dEtleSkuc3Vic2NyaWJlKCh0KSA9PiB7XG4gICAgICBpZiAodCAhPT0gdGhpcy5jb3B5VG9DbGlwYm9hcmRUZXh0S2V5KSB7XG4gICAgICAgIHRoaXMuY29weVRvQ2xpcGJvYXJkVGV4dCA9IHQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KHRoaXMuY29waWVkVG9DbGlwYm9hcmRUZXh0S2V5KS5zdWJzY3JpYmUoKHQpID0+IHtcbiAgICAgIGlmICh0ICE9PSB0aGlzLmNvcGllZFRvQ2xpcGJvYXJkVGV4dEtleSkge1xuICAgICAgICB0aGlzLmNvcGllZFRvQ2xpcGJvYXJkVGV4dCA9IHQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgY29uc3QgY29weVRvb2x0aXAgPSBuZXcgVG9vbHRpcCh0aGlzLmNvcHlJY29uLm5hdGl2ZUVsZW1lbnQsIHsgdGl0bGU6IHRoaXMuY29weVRvQ2xpcGJvYXJkVGV4dCB9KTtcbiAgICBjb25zdCBjb3BpZWRUb29sdGlwID0gbmV3IFRvb2x0aXAodGhpcy5jb3BpZWRJY29uLm5hdGl2ZUVsZW1lbnQsIHsgdGl0bGU6IHRoaXMuY29waWVkVG9DbGlwYm9hcmRUZXh0IH0pO1xuXG4gICAgdGhpcy50b29sdGlwcy5wdXNoKGNvcHlUb29sdGlwLCBjb3BpZWRUb29sdGlwKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudG9vbHRpcHMuZm9yRWFjaCgodCkgPT4gdC5kaXNwb3NlKCkpO1xuICB9XG5cbiAgcHVibGljIGNvcHlUb0NsaXBib2FyZCgpOiB2b2lkIHtcbiAgICB0aGlzLmNsaXBib2FyZFNlcmljZS5lbWl0VG9DbGlwYm9hcmQodGhpcy5jbGlwKTtcbiAgICB0aGlzLmlzQ29waWVkID0gdHJ1ZTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5pc0NvcGllZCA9IGZhbHNlO1xuICAgIH0sIDEwMDApO1xuICB9XG59XG4iXX0=