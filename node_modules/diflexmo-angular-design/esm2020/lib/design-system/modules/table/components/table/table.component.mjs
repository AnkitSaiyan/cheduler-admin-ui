import { Component, ContentChild, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { debounceTime, Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "angular-resize-event";
import * as i3 from "../../../base-checkbox/components/checkbox/checkbox.component";
import * as i4 from "@angular/forms";
import * as i5 from "../table-header-cell/table-header-cell.component";
import * as i6 from "../table-body-cell/table-body-cell.component";
export class TableComponent {
    constructor() {
        this.items = [];
        this.selectable = false;
        this.rowClickable = false;
        this.selected = new EventEmitter();
        this.rowClicked = new EventEmitter();
        this.tableSizeChanged$ = new Subject();
        this.isHorizontalScrollDisplayed = false;
        this.selectedItems = {};
    }
    get areAllSelected() {
        return this.items.length && Object.values(this.selectedItems).filter((v) => v).length === this.items.length;
    }
    ngOnInit() {
        this.tableSizeChanged$.pipe(debounceTime(100)).subscribe((event) => {
            const tableWrapperWidth = this.tableWrapper.nativeElement.offsetWidth;
            const tableWidth = event.newRect.width;
            this.isHorizontalScrollDisplayed = tableWrapperWidth < tableWidth;
        });
        if (this.selectable) {
            this.items.forEach((i) => (this.selectedItems[i.id] = false));
        }
        if (this.clearSelected$) {
            this.clearSelected$.subscribe(() => {
                this.selectedItems = {};
                this.selected.emit([]);
            });
        }
    }
    checkTableSize(event) {
        this.tableSizeChanged$.next(event);
    }
    selectAllItems() {
        if (!this.areAllSelected) {
            const ids = this.items.map((i) => {
                this.selectedItems[i.id] = true;
                return i.id;
            });
            this.selected.emit(ids);
        }
        else {
            this.selectedItems = {};
            this.selected.emit([]);
        }
    }
    selectItem(selected, id) {
        this.selectedItems[id] = selected;
        const ids = Object.entries(this.selectedItems)
            .filter(([, value]) => value)
            .map(([key]) => key);
        this.selected.emit(ids);
    }
    click(item) {
        this.rowClicked.emit(item);
    }
}
TableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: TableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: TableComponent, selector: "dfm-table", inputs: { items: "items", selectable: "selectable", clearSelected$: "clearSelected$", rowClickable: "rowClickable" }, outputs: { selected: "selected", rowClicked: "rowClicked" }, queries: [{ propertyName: "headerRowTemplate", first: true, predicate: ["headerRowTemplate"], descendants: true }, { propertyName: "bodyRowTemplate", first: true, predicate: ["bodyRowTemplate"], descendants: true }], viewQueries: [{ propertyName: "tableWrapper", first: true, predicate: ["tableWrapper"], descendants: true }], ngImport: i0, template: "<div class=\"dfm-table-wrapper\" #tableWrapper>\n  <table class=\"dfm-table w-100\" [class.first-frozen]=\"isHorizontalScrollDisplayed\" (resized)=\"checkTableSize($event)\">\n    <thead class=\"header\">\n      <tr>\n        <dfm-table-header-cell *ngIf=\"selectable\" class=\"checkbox-cell\" [class.checkbox-first-frozen]=\"isHorizontalScrollDisplayed\">\n          <dfm-checkbox class=\"d-flex dfm-me-2\" [ngModel]=\"areAllSelected\" (click)=\"selectAllItems()\" [disabled]=\"!items.length\"></dfm-checkbox>\n        </dfm-table-header-cell>\n        <ng-content *ngTemplateOutlet=\"headerRowTemplate\"></ng-content>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let item of items\" class=\"body-row\" (click)=\"click(item)\" [class.pointer]=\"rowClickable\">\n        <dfm-table-body-cell *ngIf=\"selectable\" class=\"checkbox-cell\" [class.checkbox-first-frozen]=\"isHorizontalScrollDisplayed\">\n          <dfm-checkbox class=\"d-flex dfm-me-2\" [ngModel]=\"selectedItems[item.id]\" (ngModelChange)=\"selectItem($event, item.id)\"></dfm-checkbox>\n        </dfm-table-body-cell>\n        <ng-container *ngTemplateOutlet=\"bodyRowTemplate; context: { $implicit: item }\"></ng-container>\n      </tr>\n    </tbody>\n  </table>\n</div>\n", styles: [":host{height:100%}.dfm-table-wrapper{overflow:overlay;border:1px solid var(--dfm-table-border);border-radius:8px;white-space:nowrap;max-height:100%}.dfm-table{border-collapse:separate;border-spacing:0}.dfm-table .header{position:sticky;top:0;z-index:1}.dfm-table .body-row{border-top:1px solid var(--dfm-table-border)}.dfm-table .body-row:nth-child(even){background-color:var(--dfm-table-even-cell-bg)}.dfm-table .body-row:nth-child(odd){background-color:var(--dfm-table-odd-cell-bg)}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.ResizedDirective, selector: "[resized]", outputs: ["resized"] }, { kind: "component", type: i3.CheckboxComponent, selector: "dfm-checkbox", inputs: ["indeterminate"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5.TableHeaderCellComponent, selector: "dfm-table-header-cell", inputs: ["sortable"], outputs: ["sort"] }, { kind: "component", type: i6.TableBodyCellComponent, selector: "dfm-table-body-cell", inputs: ["propagateClick", "contentAlign"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: TableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dfm-table', template: "<div class=\"dfm-table-wrapper\" #tableWrapper>\n  <table class=\"dfm-table w-100\" [class.first-frozen]=\"isHorizontalScrollDisplayed\" (resized)=\"checkTableSize($event)\">\n    <thead class=\"header\">\n      <tr>\n        <dfm-table-header-cell *ngIf=\"selectable\" class=\"checkbox-cell\" [class.checkbox-first-frozen]=\"isHorizontalScrollDisplayed\">\n          <dfm-checkbox class=\"d-flex dfm-me-2\" [ngModel]=\"areAllSelected\" (click)=\"selectAllItems()\" [disabled]=\"!items.length\"></dfm-checkbox>\n        </dfm-table-header-cell>\n        <ng-content *ngTemplateOutlet=\"headerRowTemplate\"></ng-content>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let item of items\" class=\"body-row\" (click)=\"click(item)\" [class.pointer]=\"rowClickable\">\n        <dfm-table-body-cell *ngIf=\"selectable\" class=\"checkbox-cell\" [class.checkbox-first-frozen]=\"isHorizontalScrollDisplayed\">\n          <dfm-checkbox class=\"d-flex dfm-me-2\" [ngModel]=\"selectedItems[item.id]\" (ngModelChange)=\"selectItem($event, item.id)\"></dfm-checkbox>\n        </dfm-table-body-cell>\n        <ng-container *ngTemplateOutlet=\"bodyRowTemplate; context: { $implicit: item }\"></ng-container>\n      </tr>\n    </tbody>\n  </table>\n</div>\n", styles: [":host{height:100%}.dfm-table-wrapper{overflow:overlay;border:1px solid var(--dfm-table-border);border-radius:8px;white-space:nowrap;max-height:100%}.dfm-table{border-collapse:separate;border-spacing:0}.dfm-table .header{position:sticky;top:0;z-index:1}.dfm-table .body-row{border-top:1px solid var(--dfm-table-border)}.dfm-table .body-row:nth-child(even){background-color:var(--dfm-table-even-cell-bg)}.dfm-table .body-row:nth-child(odd){background-color:var(--dfm-table-odd-cell-bg)}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], selectable: [{
                type: Input
            }], clearSelected$: [{
                type: Input
            }], rowClickable: [{
                type: Input
            }], selected: [{
                type: Output
            }], rowClicked: [{
                type: Output
            }], headerRowTemplate: [{
                type: ContentChild,
                args: ['headerRowTemplate']
            }], bodyRowTemplate: [{
                type: ContentChild,
                args: ['bodyRowTemplate']
            }], tableWrapper: [{
                type: ViewChild,
                args: ['tableWrapper', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,