import { SelectItem } from '../modules/input-dropdown/models/select-item';
export class ItemsCompactHelper {
    static getItemsUnion(itemsUnionName = '+100 items') {
        return new SelectItem(itemsUnionName, '');
    }
    static compactItems(itemsToCompact, containerWidth, itemsGap, itemsElementRef, itemsUnionName = 'items') {
        let items = [...itemsToCompact];
        let itemsUnionIndex = items.length - 1;
        const itemsUnion = items[itemsUnionIndex];
        const itemsCalculations = this.getItemsCalculations(itemsUnionIndex, containerWidth, itemsGap, itemsElementRef);
        const numberOfItemsToDisplay = itemsCalculations.lastVisibleIndex;
        const numberOfItemsToHide = items.length - 1 - numberOfItemsToDisplay;
        if (numberOfItemsToHide > 1) {
            const itemsUnionNamePostfix = itemsUnionName ? ` ${itemsUnionName}` : '';
            itemsUnion.name = numberOfItemsToHide > 100 ? itemsUnion.name : `${numberOfItemsToHide}${itemsUnionNamePostfix}`;
            items = [...items.slice(0, numberOfItemsToDisplay), itemsUnion];
            itemsUnionIndex = items.length - 1;
        }
        else {
            items = items.slice(0, items.length - 1);
        }
        return { items, itemsUnionIndex, containerWidth: itemsCalculations.containerWidth };
    }
    static getItemsCalculations(itemsUnionIndex, containerWidth, itemsGap, itemsElementRef) {
        let lastVisibleItemIndex = 0;
        let visibleItemsUnionIndex = 0;
        let itemsContainerWidth = 0;
        let itemsContainerWithUnionWidth = 0;
        const itemsUnionWidth = itemsElementRef.get(itemsUnionIndex).nativeElement.offsetWidth + itemsGap;
        for (let i = 0; i < itemsElementRef.length - 1; i++) {
            const selectedItemWidth = itemsElementRef.get(i).nativeElement.offsetWidth + itemsGap;
            const possibleItemsContainerWithUnionWidth = itemsContainerWidth + itemsUnionWidth;
            if (possibleItemsContainerWithUnionWidth <= containerWidth) {
                itemsContainerWithUnionWidth = possibleItemsContainerWithUnionWidth;
                visibleItemsUnionIndex = i;
            }
            itemsContainerWidth += selectedItemWidth;
            if (itemsContainerWidth <= containerWidth) {
                lastVisibleItemIndex = i;
            }
            else {
                return {
                    lastVisibleIndex: visibleItemsUnionIndex < lastVisibleItemIndex ? visibleItemsUnionIndex : lastVisibleItemIndex,
                    containerWidth: itemsContainerWithUnionWidth < itemsContainerWidth && itemsContainerWithUnionWidth !== 0
                        ? itemsContainerWithUnionWidth
                        : itemsContainerWidth,
                };
            }
        }
        return { lastVisibleIndex: lastVisibleItemIndex, containerWidth: itemsContainerWidth };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMtY29tcGFjdC1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kaWZsZXhtby1hbmd1bGFyLWRlc2lnbi9zcmMvbGliL2Rlc2lnbi1zeXN0ZW0vaGVscGVycy9pdGVtcy1jb21wYWN0LWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFMUUsTUFBTSxPQUFPLGtCQUFrQjtJQUN0QixNQUFNLENBQUMsYUFBYSxDQUFDLGlCQUF5QixZQUFZO1FBQy9ELE9BQU8sSUFBSSxVQUFVLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWSxDQUN4QixjQUFxQixFQUNyQixjQUFzQixFQUN0QixRQUFnQixFQUNoQixlQUFzQyxFQUN0QyxpQkFBeUIsT0FBTztRQUVoQyxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUM7UUFDaEMsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDdkMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTFDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ2hILE1BQU0sc0JBQXNCLEdBQUcsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUM7UUFDbEUsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxzQkFBc0IsQ0FBQztRQUV0RSxJQUFJLG1CQUFtQixHQUFHLENBQUMsRUFBRTtZQUMzQixNQUFNLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3pFLFVBQVUsQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixFQUFFLENBQUM7WUFDakgsS0FBSyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2hFLGVBQWUsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0wsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDMUM7UUFFRCxPQUFPLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdEYsQ0FBQztJQUVPLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDakMsZUFBdUIsRUFDdkIsY0FBc0IsRUFDdEIsUUFBZ0IsRUFDaEIsZUFBc0M7UUFFdEMsSUFBSSxvQkFBb0IsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxzQkFBc0IsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSw0QkFBNEIsR0FBRyxDQUFDLENBQUM7UUFFckMsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQztRQUVuRyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkQsTUFBTSxpQkFBaUIsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO1lBQ3ZGLE1BQU0sb0NBQW9DLEdBQUcsbUJBQW1CLEdBQUcsZUFBZSxDQUFDO1lBRW5GLElBQUksb0NBQW9DLElBQUksY0FBYyxFQUFFO2dCQUMxRCw0QkFBNEIsR0FBRyxvQ0FBb0MsQ0FBQztnQkFDcEUsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO2FBQzVCO1lBRUQsbUJBQW1CLElBQUksaUJBQWlCLENBQUM7WUFFekMsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLEVBQUU7Z0JBQ3pDLG9CQUFvQixHQUFHLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxPQUFPO29CQUNMLGdCQUFnQixFQUFFLHNCQUFzQixHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsb0JBQW9CO29CQUMvRyxjQUFjLEVBQ1osNEJBQTRCLEdBQUcsbUJBQW1CLElBQUksNEJBQTRCLEtBQUssQ0FBQzt3QkFDdEYsQ0FBQyxDQUFDLDRCQUE0Qjt3QkFDOUIsQ0FBQyxDQUFDLG1CQUFtQjtpQkFDMUIsQ0FBQzthQUNIO1NBQ0Y7UUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLG1CQUFtQixFQUFFLENBQUM7SUFDekYsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3RJdGVtIH0gZnJvbSAnLi4vbW9kdWxlcy9pbnB1dC1kcm9wZG93bi9tb2RlbHMvc2VsZWN0LWl0ZW0nO1xuXG5leHBvcnQgY2xhc3MgSXRlbXNDb21wYWN0SGVscGVyIHtcbiAgcHVibGljIHN0YXRpYyBnZXRJdGVtc1VuaW9uKGl0ZW1zVW5pb25OYW1lOiBzdHJpbmcgPSAnKzEwMCBpdGVtcycpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdEl0ZW0oaXRlbXNVbmlvbk5hbWUsICcnKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY29tcGFjdEl0ZW1zKFxuICAgIGl0ZW1zVG9Db21wYWN0OiBhbnlbXSxcbiAgICBjb250YWluZXJXaWR0aDogbnVtYmVyLFxuICAgIGl0ZW1zR2FwOiBudW1iZXIsXG4gICAgaXRlbXNFbGVtZW50UmVmOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj4sXG4gICAgaXRlbXNVbmlvbk5hbWU6IHN0cmluZyA9ICdpdGVtcycsXG4gICk6IHsgaXRlbXM6IGFueVtdOyBpdGVtc1VuaW9uSW5kZXg6IG51bWJlcjsgY29udGFpbmVyV2lkdGg6IG51bWJlciB9IHtcbiAgICBsZXQgaXRlbXMgPSBbLi4uaXRlbXNUb0NvbXBhY3RdO1xuICAgIGxldCBpdGVtc1VuaW9uSW5kZXggPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGl0ZW1zVW5pb24gPSBpdGVtc1tpdGVtc1VuaW9uSW5kZXhdO1xuXG4gICAgY29uc3QgaXRlbXNDYWxjdWxhdGlvbnMgPSB0aGlzLmdldEl0ZW1zQ2FsY3VsYXRpb25zKGl0ZW1zVW5pb25JbmRleCwgY29udGFpbmVyV2lkdGgsIGl0ZW1zR2FwLCBpdGVtc0VsZW1lbnRSZWYpO1xuICAgIGNvbnN0IG51bWJlck9mSXRlbXNUb0Rpc3BsYXkgPSBpdGVtc0NhbGN1bGF0aW9ucy5sYXN0VmlzaWJsZUluZGV4O1xuICAgIGNvbnN0IG51bWJlck9mSXRlbXNUb0hpZGUgPSBpdGVtcy5sZW5ndGggLSAxIC0gbnVtYmVyT2ZJdGVtc1RvRGlzcGxheTtcblxuICAgIGlmIChudW1iZXJPZkl0ZW1zVG9IaWRlID4gMSkge1xuICAgICAgY29uc3QgaXRlbXNVbmlvbk5hbWVQb3N0Zml4ID0gaXRlbXNVbmlvbk5hbWUgPyBgICR7aXRlbXNVbmlvbk5hbWV9YCA6ICcnO1xuICAgICAgaXRlbXNVbmlvbi5uYW1lID0gbnVtYmVyT2ZJdGVtc1RvSGlkZSA+IDEwMCA/IGl0ZW1zVW5pb24ubmFtZSA6IGAke251bWJlck9mSXRlbXNUb0hpZGV9JHtpdGVtc1VuaW9uTmFtZVBvc3RmaXh9YDtcbiAgICAgIGl0ZW1zID0gWy4uLml0ZW1zLnNsaWNlKDAsIG51bWJlck9mSXRlbXNUb0Rpc3BsYXkpLCBpdGVtc1VuaW9uXTtcbiAgICAgIGl0ZW1zVW5pb25JbmRleCA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1zID0gaXRlbXMuc2xpY2UoMCwgaXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgaXRlbXMsIGl0ZW1zVW5pb25JbmRleCwgY29udGFpbmVyV2lkdGg6IGl0ZW1zQ2FsY3VsYXRpb25zLmNvbnRhaW5lcldpZHRoIH07XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBnZXRJdGVtc0NhbGN1bGF0aW9ucyhcbiAgICBpdGVtc1VuaW9uSW5kZXg6IG51bWJlcixcbiAgICBjb250YWluZXJXaWR0aDogbnVtYmVyLFxuICAgIGl0ZW1zR2FwOiBudW1iZXIsXG4gICAgaXRlbXNFbGVtZW50UmVmOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj4sXG4gICk6IHsgbGFzdFZpc2libGVJbmRleDogbnVtYmVyOyBjb250YWluZXJXaWR0aDogbnVtYmVyIH0ge1xuICAgIGxldCBsYXN0VmlzaWJsZUl0ZW1JbmRleCA9IDA7XG4gICAgbGV0IHZpc2libGVJdGVtc1VuaW9uSW5kZXggPSAwO1xuICAgIGxldCBpdGVtc0NvbnRhaW5lcldpZHRoID0gMDtcbiAgICBsZXQgaXRlbXNDb250YWluZXJXaXRoVW5pb25XaWR0aCA9IDA7XG5cbiAgICBjb25zdCBpdGVtc1VuaW9uV2lkdGggPSBpdGVtc0VsZW1lbnRSZWYuZ2V0KGl0ZW1zVW5pb25JbmRleCkhLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggKyBpdGVtc0dhcDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXNFbGVtZW50UmVmLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtV2lkdGggPSBpdGVtc0VsZW1lbnRSZWYuZ2V0KGkpIS5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoICsgaXRlbXNHYXA7XG4gICAgICBjb25zdCBwb3NzaWJsZUl0ZW1zQ29udGFpbmVyV2l0aFVuaW9uV2lkdGggPSBpdGVtc0NvbnRhaW5lcldpZHRoICsgaXRlbXNVbmlvbldpZHRoO1xuXG4gICAgICBpZiAocG9zc2libGVJdGVtc0NvbnRhaW5lcldpdGhVbmlvbldpZHRoIDw9IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgIGl0ZW1zQ29udGFpbmVyV2l0aFVuaW9uV2lkdGggPSBwb3NzaWJsZUl0ZW1zQ29udGFpbmVyV2l0aFVuaW9uV2lkdGg7XG4gICAgICAgIHZpc2libGVJdGVtc1VuaW9uSW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBpdGVtc0NvbnRhaW5lcldpZHRoICs9IHNlbGVjdGVkSXRlbVdpZHRoO1xuXG4gICAgICBpZiAoaXRlbXNDb250YWluZXJXaWR0aCA8PSBjb250YWluZXJXaWR0aCkge1xuICAgICAgICBsYXN0VmlzaWJsZUl0ZW1JbmRleCA9IGk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxhc3RWaXNpYmxlSW5kZXg6IHZpc2libGVJdGVtc1VuaW9uSW5kZXggPCBsYXN0VmlzaWJsZUl0ZW1JbmRleCA/IHZpc2libGVJdGVtc1VuaW9uSW5kZXggOiBsYXN0VmlzaWJsZUl0ZW1JbmRleCxcbiAgICAgICAgICBjb250YWluZXJXaWR0aDpcbiAgICAgICAgICAgIGl0ZW1zQ29udGFpbmVyV2l0aFVuaW9uV2lkdGggPCBpdGVtc0NvbnRhaW5lcldpZHRoICYmIGl0ZW1zQ29udGFpbmVyV2l0aFVuaW9uV2lkdGggIT09IDBcbiAgICAgICAgICAgICAgPyBpdGVtc0NvbnRhaW5lcldpdGhVbmlvbldpZHRoXG4gICAgICAgICAgICAgIDogaXRlbXNDb250YWluZXJXaWR0aCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBsYXN0VmlzaWJsZUluZGV4OiBsYXN0VmlzaWJsZUl0ZW1JbmRleCwgY29udGFpbmVyV2lkdGg6IGl0ZW1zQ29udGFpbmVyV2lkdGggfTtcbiAgfVxufVxuIl19