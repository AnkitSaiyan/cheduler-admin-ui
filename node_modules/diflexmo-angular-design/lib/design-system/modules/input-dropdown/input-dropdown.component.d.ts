import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, QueryList, SimpleChanges } from '@angular/core';
import { NgControl } from '@angular/forms';
import { InputSize } from '../../types/input-size.type';
import { BaseControlValueAccessor } from '../base-control-value-accessor';
import { SelectItem } from './models/select-item';
import * as i0 from "@angular/core";
export declare class InputDropdownComponent extends BaseControlValueAccessor implements OnInit, AfterViewInit, OnChanges {
    private changeDetectionRef;
    control: NgControl;
    private eRef;
    items: SelectItem[];
    label: string;
    placeholder: string;
    hint: string;
    showDescription: boolean;
    multiple: boolean;
    size: InputSize;
    icon: string;
    minQueryLength: number;
    typeToSearch: boolean;
    typeToSearchText: string;
    loading: boolean;
    asyncSearch: boolean;
    searchInput: EventEmitter<string>;
    menuClosed: EventEmitter<any>;
    selectedItemsContainerRef: ElementRef;
    selectedItemsRef: QueryList<ElementRef>;
    searchInputRef: ElementRef;
    dropdownRef: ElementRef;
    search: string;
    selectedItemTags: SelectItem[];
    selectedItemTagsUnionIndex?: number;
    filteredItems: SelectItem[];
    private defaultMultipleDropdownPaddingRight;
    private multipleDropdownWithIconPaddingRight;
    private isDropdownClosed;
    private dropdownInstance?;
    selectedItems: SelectItem[];
    constructor(changeDetectionRef: ChangeDetectorRef, control: NgControl, eRef: ElementRef);
    private wasInside;
    clickInside(): void;
    clickout(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: string | string[]): void;
    updateSearch(query: string): void;
    searchItems(query: string): void;
    selectItem(item: SelectItem): void;
    removeItem(item: SelectItem): void;
    updateSelectedItems(): void;
    openDropdown(): void;
    checkIfDropdownIsClosed(mutationRecord: MutationRecord): void;
    private updateInputDropdown;
    private updateMultiInputDropdown;
    private updateSingleInputDropdown;
    private setSingleInputDropdown;
    private resetInputDropdown;
    focusout(value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputDropdownComponent, [null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputDropdownComponent, "dfm-input-dropdown", never, { "items": "items"; "label": "label"; "placeholder": "placeholder"; "hint": "hint"; "showDescription": "showDescription"; "multiple": "multiple"; "size": "size"; "icon": "icon"; "minQueryLength": "minQueryLength"; "typeToSearch": "typeToSearch"; "typeToSearchText": "typeToSearchText"; "loading": "loading"; "asyncSearch": "asyncSearch"; }, { "searchInput": "searchInput"; "menuClosed": "menuClosed"; }, never, never, false>;
}
